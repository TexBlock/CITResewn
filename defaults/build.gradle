plugins.apply 'dev.architectury.loom'
//plugins.apply 'io.shcm.shsupercm.fabric.fletchingtable'

version = "${property('mod.version')}+${stonecutter.current.version}"
group = 'org.thinkingstudio.citfoxified.defaults'

def modPlatform = property("loom.platform")
def isJava21 = stonecutter.eval(stonecutter.current.version, ">=1.20.5")

repositories {
    maven { url 'https://maven.terraformersmc.com/releases/' }
    maven { url 'https://maven.shedaniel.me/' }
    maven { url "https://maven.neoforged.net/releases/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${stonecutter.current.version}"

    if (modPlatform == "forge") {
        mappings "net.fabricmc:yarn:${property('deps.yarn')}:v2"
    } else if (modPlatform == "neoforge") {
        mappings loom.layered {
            mappings "net.fabricmc:yarn:${property('deps.yarn')}:v2"
            if (stonecutter.current.version == "1.21") {
                mappings "dev.architectury:yarn-mappings-patch-neoforge:1.21+build.4"
            }
        }
    }

    if (modPlatform == "forge") {
        forge "net.minecraftforge:forge:${stonecutter.current.version}-${property('deps.forge')}"
        modCompileOnly "me.shedaniel.cloth:cloth-config-forge:${property('deps.cloth-config')}"
        compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
        implementation(include("io.github.llamalad7:mixinextras-forge:0.4.1"))
    } else if (modPlatform == "neoforge") {
        neoForge "net.neoforged:neoforge:${property('deps.neoforge')}"
        modCompileOnly "me.shedaniel.cloth:cloth-config-neoforge:${property('deps.cloth-config')}"
    }

    implementation project(path: stonecutter.node.sibling("").getPath(), configuration: "namedElements")

    // testing mods
    if (modPlatform == "forge") {
        modRuntimeOnly "me.shedaniel.cloth:cloth-config-forge:${property('deps.cloth-config')}"
    } else if (modPlatform == "neoforge") {
        modRuntimeOnly "me.shedaniel.cloth:cloth-config-neoforge:${property('deps.cloth-config')}"
    }
}

/*
fletchingTable {
    defaultMixinEnvironment = "auto"
}
 */

loom {
    accessWidenerPath = project(":defaults").file("src/main/resources/citresewn-defaults.accesswidener")

    if (modPlatform == "forge") {
        forge {
            convertAccessWideners.set(true)
            mixinConfigs("citresewn-defaults.mixins.json")
        }
    }

    validateAccessWidener {
        enabled = false
    }

    runConfigs.client.ideConfigGenerated = false
    runConfigs.server.ideConfigGenerated = false
}

java {
    withSourcesJar()
    sourceCompatibility = isJava21 ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17
    targetCompatibility = isJava21 ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17

    archivesBaseName = "${property('mod.jarname')}-defaults"
}

processResources {
    if (modPlatform == "forge" || modPlatform == "neoforge") {
        if (modPlatform != "forge") {
            exclude "META-INF/mods.toml"
        }
        if (modPlatform != "neoforge") {
            exclude "META-INF/neoforge.mods.toml"
        }
        filesMatching(modPlatform == "forge" ? "META-INF/mods.toml" : "META-INF/neoforge.mods.toml") {
            expand 'mod_version': version
        }
    }
}

jar {
    archiveClassifier.set 'dev'

    from rootProject.file('LICENSE')
}

remapJar {
    if (modPlatform == "neoforge") {
        atAccessWideners.add("citresewn-defaults.accesswidener")
    }
}

if (stonecutter.current.isActive) {
    loom.runConfigs.client.ideConfigGenerated = true

    plugins.apply 'com.modrinth.minotaur'

    modrinth {
        token = "TOKEN_MODRINTH"
        projectId = property('publish.modrinth.defaults.id')
        uploadFile = remapJar
        versionNumber = version
        versionName = "v" + version
        additionalFiles = [sourcesJar.outputs.getFiles().singleFile]
        gameVersions = Arrays.asList(property('publish.target-mc').split(","))
    }

    rootProject.tasks.named('publishActive') {
        Task remapJarTask = tasks.getByName 'remapJar'
        Task modrinthTask = tasks.getByName 'modrinth'

        dependsOn remapJarTask, modrinthTask
        modrinthTask.mustRunAfter remapJarTask
    }
}
